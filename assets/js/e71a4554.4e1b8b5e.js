"use strict";(globalThis.webpackChunketh_hooks_documentation=globalThis.webpackChunketh_hooks_documentation||[]).push([[5904],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var o=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,o,a=function(t,e){if(null==t)return{};var n,o,a={},r=Object.keys(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(o=0;o<r.length;o++)n=r[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var i=o.createContext({}),p=function(t){var e=o.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},l=function(t){var e=p(t.components);return o.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},h=o.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,i=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),h=p(n),d=a,f=h["".concat(i,".").concat(d)]||h[d]||u[d]||r;return n?o.createElement(f,c(c({ref:e},l),{},{components:n})):o.createElement(f,c({ref:e},l))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,c=new Array(r);c[0]=h;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s.mdxType="string"==typeof t?t:a,c[1]=s;for(var p=2;p<r;p++)c[p]=n[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5220:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={},c=void 0,s={unversionedId:"main/context/ContractAppContext",id:"main/context/ContractAppContext",title:"ContractAppContext",description:"How to use ContractAppContext",source:"@site/docs/main/context/ContractAppContext.mdx",sourceDirName:"main/context",slug:"/main/context/ContractAppContext",permalink:"/eth-hooks/docs/main/context/ContractAppContext",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/main/context/ContractAppContext.mdx",tags:[],version:"current",frontMatter:{},sidebar:"overview",previous:{title:"useTokenBalance",permalink:"/eth-hooks/docs/main/hooks/useTokenBalance"},next:{title:"EthersAppContext",permalink:"/eth-hooks/docs/main/context/EthersAppContext"}},i={},p=[{value:"How to use <code>ContractAppContext</code>",id:"how-to-use-contractappcontext",level:2},{value:"\ud83d\udea9 1. Generating types for your contract",id:"-1-generating-types-for-your-contract",level:3},{value:"How to use <code>eth-sdk</code> for external contracts",id:"how-to-use-eth-sdk-for-external-contracts",level:4},{value:"How to use Hardhat with typechain",id:"how-to-use-hardhat-with-typechain",level:4},{value:"\ud83d\udea9 2. Creating the context with <code>contractsContextFactory</code>",id:"-2-creating-the-context-with-contractscontextfactory",level:3},{value:"\ud83d\udea9 3. Using hooks to get your contracts",id:"-3-using-hooks-to-get-your-contracts",level:3}],l={toc:p};function u(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,o.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-use-contractappcontext"},"How to use ",(0,a.kt)("inlineCode",{parentName:"h2"},"ContractAppContext")),(0,a.kt)("h3",{id:"-1-generating-types-for-your-contract"},"\ud83d\udea9 1. Generating types for your contract"),(0,a.kt)("p",null,"First, you'll have to generate your contract types for Hardhat and external contracts."),(0,a.kt)("p",null,"To do this, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"eth-sdk")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"typechain with hardhat")," to generate your contracts. Then add them to a folder, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"generated/contract-types"),"."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You can see how this is done in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript"},"scaffold-eth-typescript")," repo"))),(0,a.kt)("h4",{id:"how-to-use-eth-sdk-for-external-contracts"},"How to use ",(0,a.kt)("inlineCode",{parentName:"h4"},"eth-sdk")," for external contracts"),(0,a.kt)("p",null,"Scaffold-eth-typescript uses ",(0,a.kt)("inlineCode",{parentName:"p"},"eth-sdk")," to generate types and an ABI for use by external contracts."),(0,a.kt)("p",null,"\ud83d\udcdd Note: This would be a dev dependency on your project."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a config of ",(0,a.kt)("inlineCode",{parentName:"li"},"{contractNames: address}")," ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/externalContractsConfig.ts"},"externalContractConfig.ts")),(0,a.kt)("li",{parentName:"ul"},"a config for ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/scripts/eth-sdk-config.ts.bak"},"eth-sdk-config.ts")),(0,a.kt)("li",{parentName:"ul"},"and calling the ",(0,a.kt)("inlineCode",{parentName:"li"},"eth-sdk")," with the folder of your config file as a parameter e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"yarn eth-sdk -p ./src/generated"))),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You can learn more at the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/eth-sdk"},"eth-sdk Github")))),(0,a.kt)("h4",{id:"how-to-use-hardhat-with-typechain"},"How to use Hardhat with typechain"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Check out the excellent ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dethcrypto/TypeChain"},"typechain docs"),".\nYou can also find an example in scaffold-eth-typescript ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/hardhat-ts/hardhat.config.ts"},"hardhat.config.ts"),".")),(0,a.kt)("h3",{id:"-2-creating-the-context-with-contractscontextfactory"},"\ud83d\udea9 2. Creating the context with ",(0,a.kt)("inlineCode",{parentName:"h3"},"contractsContextFactory")),(0,a.kt)("p",null,"You need to create a config that returns a config of your contracts. This would be heterogenous key-value pair. Each value is generated by the helper functions in eth-hooks."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// a function that generates the config. Note that your types have to exist already!\nexport const contractConnectorConfig = () => {\n  try {\n    const result = {\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your hadrdhat contracts here\n      YourContract: createConnectorForHardhatContract(\n        'YourContract',\n        hardhatContracts.YourContract__factory,\n        hardhatContractsJson\n      ),\n\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your external contracts here, make sure to define the address in `externalContractsConfig.ts`\n      DAI: createConnectorForExternalContract('DAI', externalContracts.DAI__factory, externalContractsAddressMap),\n      UNI: createConnectorForExternalContract('UNI', externalContracts.UNI__factory, externalContractsAddressMap),\n\n      // \ud83d\ude4b\ud83c\udffd\u200d\u2642\ufe0f Add your external abi here (unverified contracts)`\n      // DAI: createConnectorForExternalAbi('DAI', { 1: {address: 'xxxx'}}, abi),\n    } as const;\n\n    return result;\n  } catch (e) {\n    console.error(\n      '\u274c contractConnectorConfig: ERROR with loading contracts please run `yarn contracts:build or yarn contracts:rebuild`.  Then run `yarn deploy`!',\n      e\n    );\n  }\n\n  return undefined;\n};\n\n// create a type from the return value of the function above\nexport type TAppConnectorList = NonNullable<ReturnType<typeof contractConnectorConfig>>;\n")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"contractContextFactory")," to create your hooks and context in your app from the above configuration."),(0,a.kt)("p",null,"You can copy the code below and use it to get started fast:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// you're passing in function `contractConnectorConfig` from above into the factory.  You then have to use the type we defined to type the factory outputs.\nexport const {\n  ContractsAppContext,\n  useAppContractsActions,\n  useAppContracts,\n  useLoadAppContracts,\n  useConnectAppContracts,\n} = contractsContextFactory<\n  /* the contractNames (keys) in config output */\n  keyof TAppConnectorList,\n  /* the type of the config output  */\n  TAppConnectorList,\n  /* A type that infers the value of each contractName: contract pair*/\n  TTypedContract<keyof TAppConnectorList, TAppConnectorList>\n>(contractConnectorConfig);\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"See scaffold-eth-typescript ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/contractContext.ts"},"contractContext.tsx")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth-typescript/blob/next/packages/vite-app-ts/src/config/contractConnectorConfig.ts"},"contractConnectorConfig.ts")," for full examples of how to do this"))),(0,a.kt)("h3",{id:"-3-using-hooks-to-get-your-contracts"},"\ud83d\udea9 3. Using hooks to get your contracts"),(0,a.kt)("p",null,"Now that you've created the context, you can use hooks in your app."),(0,a.kt)("p",null,"The first step is to load your contracts using the hooks you've created with the factory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// \ud83d\udefb load contracts\nuseLoadAppContracts();\n")),(0,a.kt)("p",null,"Next you'll want to connect the contracts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// \ud83c\udfed connect to  contracts for current network & signer\nuseConnectAppContracts(asEthersAdaptor(ethersContext));\n\n// \ud83c\udfed connect to contracts for mainnet network & signer\nconst [mainnetAdaptor] = useEthersAdaptorFromProviderOrSigners(mainnetProvider);\nuseConnectAppContracts(mainnetAdaptor);\n")),(0,a.kt)("p",null,"Now you can get typed contracts anywhere in your app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const yourContract = useAppContracts('YourContract', ethersContext.chainId);\nconst mainnetDai = useAppContracts('DAI', NETWORKS.mainnet.chainId);\n")),(0,a.kt)("p",null,"And you can do cool stuff like read values from your contracts using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useContractReader")," hook:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// keep track of a variable from the contract in the local React state:\nconst [purpose, update] = useContractReader(\n  /* the contract */\n  yourContract,\n  /* the contract variable or function to read */\n  yourContract?.purpose,\n  /* the arguments, they are typed tuple */\n  [],\n  /* optional: if you want your contracts to only update on event */\n  yourContract?.filters.SetPurpose()\n);\n")),(0,a.kt)("p",null,"Or like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// keep track of a variable from the contract in the local React state:\nconst [purpose, update] = useContractReader(\n  /* the contract */\n  yourContract,\n  /* the contract variable or function to read */\n  yourContract?.purpose,\n  /* the arguments, they are typed tuple */\n  [],\n  undefined,\n  /* optional: update every 10 blocks */\n  { blockNumberInterval: 10 }\n);\n")))}u.isMDXComponent=!0}}]);