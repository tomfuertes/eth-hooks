"use strict";(globalThis.webpackChunketh_hooks_documentation=globalThis.webpackChunketh_hooks_documentation||[]).push([[2286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,p(p({ref:t},c),{},{components:n})):a.createElement(h,p({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var s=2;s<o;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},p="How to show an Ethereum balance on your frontend",l={unversionedId:"main/guides/tutorial-basics/basic",id:"main/guides/tutorial-basics/basic",title:"How to show an Ethereum balance on your frontend",description:"This tutorial will show you how to set up a React component that uses eth-hooks. We'll be using create-react-app with typescript.",source:"@site/docs/main/guides/tutorial-basics/basic.mdx",sourceDirName:"main/guides/tutorial-basics",slug:"/main/guides/tutorial-basics/basic",permalink:"/eth-hooks/docs/main/guides/tutorial-basics/basic",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/main/guides/tutorial-basics/basic.mdx",tags:[],version:"current",frontMatter:{},sidebar:"overview",previous:{title:"Quick start",permalink:"/eth-hooks/docs/main/guides/intro"},next:{title:"Advanced tutorial",permalink:"/eth-hooks/docs/main/guides/tutorial-advanced/advanced"}},i={},s=[{value:"\ud83d\udea9 Setup",id:"-setup",level:3},{value:"Install create-react-app with typescript",id:"install-create-react-app-with-typescript",level:4},{value:"Update to yarn 3",id:"update-to-yarn-3",level:4},{value:"yarn update step 1",id:"yarn-update-step-1",level:5},{value:"yarn update step 2",id:"yarn-update-step-2",level:5},{value:"yarn update step 3",id:"yarn-update-step-3",level:5},{value:"Add packages",id:"add-packages",level:4},{value:"Add context to your project",id:"add-context-to-your-project",level:4},{value:"\ud83d\udea9 Build your component",id:"-build-your-component",level:3},{value:"Setup an RPC",id:"setup-an-rpc",level:4},{value:"Your first React component with eth-hooks",id:"your-first-react-component-with-eth-hooks",level:4},{value:"\ud83d\udea9 Get an Ethereum balance",id:"-get-an-ethereum-balance",level:3},{value:"\ud83d\udea9 Render your component",id:"-render-your-component",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-show-an-ethereum-balance-on-your-frontend"},"How to show an Ethereum balance on your frontend"),(0,r.kt)("p",null,"This tutorial will show you how to set up a React component that uses ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hooks"),". We'll be using create-react-app with typescript."),(0,r.kt)("p",null,"After setup, we'll get an account balance on the Ethereum blockchain and show it on our frontend (",(0,r.kt)("em",{parentName:"p"},"pretty cool stuff!"),")"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you prefer a visual walk-through, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=VsPraG4KhXY"},"video guide")," this tutorial is based on."))),(0,r.kt)("h3",{id:"-setup"},"\ud83d\udea9 Setup"),(0,r.kt)("h4",{id:"install-create-react-app-with-typescript"},"Install create-react-app with typescript"),(0,r.kt)("p",null,"Enter the folder where you want your application to be stored. Then in the terminal run the command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create-react-app eth-hooks-tutorial --template typescript\n")),(0,r.kt)("p",null,"After installation is complete, enter the new folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd eth-hooks-tutorial\n")),(0,r.kt)("h4",{id:"update-to-yarn-3"},"Update to yarn 3"),(0,r.kt)("p",null,"Before we install ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hooks")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ethers")," packages, we'll upgrade the ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," package manager.\nWe recommend using ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," 3 because it's faster than using ",(0,r.kt)("inlineCode",{parentName:"p"},"npm"),"."),(0,r.kt)("h5",{id:"yarn-update-step-1"},"yarn update step 1"),(0,r.kt)("p",null,"To update run this command in your project folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn set version berry\n")),(0,r.kt)("p",null,"This tells ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," to use the latest version (in this case, version ",(0,r.kt)("inlineCode",{parentName:"p"},"berry"),")."),(0,r.kt)("h5",{id:"yarn-update-step-2"},"yarn update step 2"),(0,r.kt)("p",null,"In your project folder (here, our project folder is ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hooks-tutorial"),") find the ",(0,r.kt)("inlineCode",{parentName:"p"},".yarnrc.yml")," file.\nIn this file, add the following line of code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"nodeLinker: node - modules;\n")),(0,r.kt)("p",null,"This tells ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"node-modules")," folder to store all packages."),(0,r.kt)("h5",{id:"yarn-update-step-3"},"yarn update step 3"),(0,r.kt)("p",null,"Finally, install the new ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn install\n")),(0,r.kt)("h4",{id:"add-packages"},"Add packages"),(0,r.kt)("p",null,"Now let's install the packages. We can install providers, ",(0,r.kt)("inlineCode",{parentName:"p"},"ethers"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hooks")," all in one line of code.\nIn your project folder, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add ethers '@ethersproject/providers' eth-hooks\n")),(0,r.kt)("h4",{id:"add-context-to-your-project"},"Add context to your project"),(0,r.kt)("p",null,"We need to import ",(0,r.kt)("inlineCode",{parentName:"p"},"EthersAppContext")," in our main app so we can access the Ethereum network and ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hooks")," anywhere in our application.\nIn your ",(0,r.kt)("inlineCode",{parentName:"p"},"index.tsx")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { EthersAppContext } from 'eth-hooks/context';\n")),(0,r.kt)("p",null,"Then wrap your ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," component, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"React.DOM.render(\n  <React.StrictMode>\n    <EthersAppContext>\n      <App />\n    </EthersAppContext>\n  </React.StrictMode>,\n  document.getElemenetById('root')\n);\n")),(0,r.kt)("p",null,"That's it. Now you can use context throughout your app."),(0,r.kt)("h3",{id:"-build-your-component"},"\ud83d\udea9 Build your component"),(0,r.kt)("p",null,"Let's replace the create-react-app startup page. We will build a new component and show it on ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:3000"),"."),(0,r.kt)("p",null,"Add a ",(0,r.kt)("inlineCode",{parentName:"p"},"component")," folder in your ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),"."),(0,r.kt)("p",null,"Let's create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"Main.tsx")," inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"component")," folder."),(0,r.kt)("p",null,"Next, we'll create a functional component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React, { FC } from 'react';\n\nexport const Main: FC = () => {};\n")),(0,r.kt)("h4",{id:"setup-an-rpc"},"Setup an RPC"),(0,r.kt)("p",null,"To read and write to the Ethereum network, you'll need a ",(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/apis/json-rpc/"},"remote procedure call or RPC"),".\nFor our purposes in this tutorial, we'll use the RPC provided by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth"},"scaffold-eth"),"."),(0,r.kt)("p",null,"Next, let's create a ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," folder inside our ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder."),(0,r.kt)("p",null,"Then let's create a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"appConfig.ts")," inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"config")," folder."),(0,r.kt)("p",null,"Now we need to set up a static connection to the Ethereum network. In your ",(0,r.kt)("inlineCode",{parentName:"p"},"appConfig.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { StaticJsonRpcProvider } from '@ethersproject/providers';\n")),(0,r.kt)("p",null,"Here's how we'll set up the static provider from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaffold-eth/scaffold-eth"},"scaffold-eth")," RPC."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const mainnetScaffoldEthProvider = new StaticJsonRpcProvider('https://rpc.scaffoldeth.io:48544');\n")),(0,r.kt)("p",null,"We can use this variable throughout our application."),(0,r.kt)("h4",{id:"your-first-react-component-with-eth-hooks"},"Your first React component with eth-hooks"),(0,r.kt)("p",null,"Now, let's go back into our ",(0,r.kt)("inlineCode",{parentName:"p"},"Main.tsx")," file and import the RPC:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { mainnetScaffoldEthProvider } from '../config/appConfig';\n")),(0,r.kt)("h3",{id:"-get-an-ethereum-balance"},"\ud83d\udea9 Get an Ethereum balance"),(0,r.kt)("p",null,"Let's do something simple, but also useful."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Let's get the balance from a given Ethereum address and show it on our frontend (if you build Dapps, you'll be doing this all the time!)")),(0,r.kt)("p",null,"We're going to need to import our first ",(0,r.kt)("inlineCode",{parentName:"p"},"eth-hook"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useEthersAdaptorFromProviderOrSigners } from 'eth-hooks';\n")),(0,r.kt)("p",null,"We'll add the following to our ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const [adaptor] = useEthersAdaptorFromProviderOrSigners(mainnetScaffoldEthProvider);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"adaptor")," is a utility function that wraps the signer, adaptor, chainId, and a few other things we need."),(0,r.kt)("p",null,"Now, let's add the ",(0,r.kt)("inlineCode",{parentName:"p"},"useBalance")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useBalance, mainnetScaffoldEthProvider } from '../config/appConfig';\n")),(0,r.kt)("p",null,"And create a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const [balance] = useBalance;\n")),(0,r.kt)("p",null,"We can also add an update option, allowing us to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"useBalance")," hook when we need:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { defualtUpdateOptions } from 'eth-hooks/models';\n")),(0,r.kt)("p",null,"Let's update our ",(0,r.kt)("inlineCode",{parentName:"p"},"balance")," function with a few extras."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const [balance] = useBalance('0xb5dFcB9EABD2D4CB96Ae86d3Fc290a70461b4e42', defualtUpdateOptions(), {\n  adaptorEnabled: true,\n  adaptor,\n});\n")),(0,r.kt)("p",null,"Here, we pass in an Ethereum address that we want to read the balance from. Then we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultUpdateOptions")," to keep our balance up-to-date.\nFor this example, we are not using the adaptor that is included with ",(0,r.kt)("inlineCode",{parentName:"p"},"EthersAppContext"),". Instead, we are passing in our own mainnet adaptor."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"We will cover using ",(0,r.kt)("inlineCode",{parentName:"strong"},"EthersAppContext")," later.")),(0,r.kt)("p",null,"Now let's convert the balance to ether:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = ethers.utils.formatEther(balance);\n")),(0,r.kt)("p",null,"Then we'll display this balance in our app, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  return\n  <div>\n    The ether balance of account: 0xb5dFcB9EABD2D4CB96Ae86d3Fc290a70461b4e42 is {result.toString()}\n  </div>\n};\n")),(0,r.kt)("p",null,"Check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"Main.tsx")," component in its final form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import React, { FC } from 'react';\nimport { useBalance, mainnetScaffoldEthProvider } from '../config/appConfig';\nimport { useEthersAdaptorFromProviderOrSigners } from 'eth-hooks';\nimport { defualtUpdateOptions } from 'eth-hooks/models';\n\nexport const Main: FC = () => {\n  const [adaptor] = useEthersAdaptorFromProviderOrSigners(mainnetScaffoldEthProvider);\n\n  const [balance] = useBalance('0xb5dFcB9EABD2D4CB96Ae86d3Fc290a70461b4e42', defualtUpdateOptions(), {\n    adaptorEnabled: true,\n    adaptor,\n  });\n\n  const result = ethers.utils.formatEther(balance);\n\n  return (\n  <div>\n    <p>\"The ether balance of account: \" 0xb5dFcB9EABD2D4CB96Ae86d3Fc290a70461b4e42 \"is \" {result.toString()}<p>\n  </div>;\n  )\n};\n")),(0,r.kt)("h3",{id:"-render-your-component"},"\ud83d\udea9 Render your component"),(0,r.kt)("p",null,"Now, let's go back into our ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx")," file and import ",(0,r.kt)("inlineCode",{parentName:"p"},"Main.tsx"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Main } from './components/Main';\n")),(0,r.kt)("p",null,"And render the component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function App() {\n  return (\n    <div>\n      <header>\n        <Main />\n      </header>\n    </div>\n  );\n}\nexport default App;\n")),(0,r.kt)("p",null,"Now checkout your frontend at ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:3000"),"."),(0,r.kt)("p",null,"Awesome work! You made it \ud83d\ude4c"))}u.isMDXComponent=!0}}]);